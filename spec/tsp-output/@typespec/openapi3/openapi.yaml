openapi: 3.0.0
info:
  title: Retro Spec
  version: 0.0.0
tags:
  - name: Teams
  - name: Users
  - name: Retros
  - name: Thoughts
  - name: Action Items
paths:
  /teams:
    get:
      tags:
        - Teams
      operationId: Teams_list
      summary: List teams the user has access to
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '401':
          description: Access is unauthorized.
    post:
      tags:
        - Teams
      operationId: Teams_create
      summary: Create a new team
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
        '401':
          description: Access is unauthorized.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
  /teams/{teamId}:
    get:
      tags:
        - Teams
      operationId: Teams_read
      summary: Retrieve a single team
      parameters:
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
    patch:
      tags:
        - Teams
      operationId: Teams_update
      summary: Update a single team
      parameters:
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamUpdate'
  /teams/{teamId}/actionitems:
    get:
      tags:
        - Action Items
      operationId: ActionItems_list
      summary: List all action items belonging to the specified team
      parameters:
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionItem'
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
    post:
      tags:
        - Action Items
      operationId: ActionItems_create
      summary: Create a new action item belonging to the specified team
      parameters:
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionItem'
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionItem'
  /teams/{teamId}/actionitems/{actionitemId}:
    get:
      tags:
        - Action Items
      operationId: ActionItems_read
      summary: Retrieve a single action item belonging to the specified team
      parameters:
        - $ref: '#/components/parameters/team'
        - $ref: '#/components/parameters/actionItem'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionItem'
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
    patch:
      tags:
        - Action Items
      operationId: ActionItems_update
      summary: Update a single action item belonging to the specified team
      parameters:
        - $ref: '#/components/parameters/team'
        - $ref: '#/components/parameters/actionItem'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionItem'
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionItemUpdate'
    delete:
      tags:
        - Action Items
      operationId: ActionItems_delete
      summary: Delete a single action item belonging to the specified team
      parameters:
        - $ref: '#/components/parameters/team'
        - $ref: '#/components/parameters/actionItem'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionItem'
  /teams/{teamId}/retros:
    get:
      tags:
        - Retros
      operationId: Retros_list
      summary: List retros belonging to the specified team
      parameters:
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Retro'
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
    post:
      tags:
        - Retros
      operationId: Retros_create
      summary: Create new retro belonging to the specified team
      parameters:
        - $ref: '#/components/parameters/team'
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Retro'
  /teams/{teamId}/retros/{retroId}:
    get:
      tags:
        - Retros
      operationId: Retros_read
      summary: Retreive a single retro belonging to the specified team
      parameters:
        - $ref: '#/components/parameters/team'
        - $ref: '#/components/parameters/retro'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retro'
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
    patch:
      tags:
        - Retros
      operationId: Retros_update
      summary: Update a single retro belonging to the specified team
      parameters:
        - $ref: '#/components/parameters/team'
        - $ref: '#/components/parameters/retro'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Retro'
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetroUpdate'
  /teams/{teamId}/retros/{retroId}/thoughts:
    get:
      tags:
        - Thoughts
      operationId: Thoughts_list
      summary: List all thoughts belonging to the specified retro
      parameters:
        - $ref: '#/components/parameters/team'
        - $ref: '#/components/parameters/retro'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Thought'
    post:
      tags:
        - Thoughts
      operationId: Thoughts_create
      summary: Create a new thought belonging to the specified retro
      parameters:
        - $ref: '#/components/parameters/team'
        - $ref: '#/components/parameters/retro'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thought'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Thought'
  /teams/{teamId}/retros/{retroId}/thoughts/{thoughtId}:
    get:
      tags:
        - Thoughts
      operationId: Thoughts_read
      summary: Retrieve a single thought belonging to the specified retro
      parameters:
        - $ref: '#/components/parameters/team'
        - $ref: '#/components/parameters/retro'
        - $ref: '#/components/parameters/thought'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thought'
    patch:
      tags:
        - Thoughts
      operationId: Thoughts_update
      summary: Update a single thought belonging to the specified retro
      parameters:
        - $ref: '#/components/parameters/team'
        - $ref: '#/components/parameters/retro'
        - $ref: '#/components/parameters/thought'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thought'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThoughtUpdate'
    delete:
      tags:
        - Thoughts
      operationId: Thoughts_delete
      summary: Delete a single thought belonging to the specified retro
      parameters:
        - $ref: '#/components/parameters/team'
        - $ref: '#/components/parameters/retro'
        - $ref: '#/components/parameters/thought'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thought'
  /teams/{teamId}/retros/{retroId}/thoughts/{thoughtId}/vote:
    put:
      tags:
        - Thoughts
      operationId: Thoughts_vote
      summary: Increment the vote count on a single thought belonging to the specified retro
      parameters:
        - $ref: '#/components/parameters/team'
        - $ref: '#/components/parameters/retro'
        - $ref: '#/components/parameters/thought'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thought'
  /teams/{teamId}/users:
    get:
      tags:
        - Users
      operationId: Users_listByTeam
      summary: List users of the specified team
      parameters:
        - $ref: '#/components/parameters/team'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
  /teams/{teamId}/users/{userId}:
    put:
      tags:
        - Users
      operationId: Users_addToTeam
      summary: Add user to the specified team
      parameters:
        - $ref: '#/components/parameters/team'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: The request has succeeded.
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
    delete:
      tags:
        - Users
      operationId: Users_removeFromTeam
      summary: Remove user from the specified team
      parameters:
        - $ref: '#/components/parameters/team'
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: The request has succeeded.
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
  /users/{userId}:
    get:
      tags:
        - Users
      operationId: Users_read
      summary: Get current user
      parameters:
        - $ref: '#/components/parameters/user'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Access is unauthorized.
        '404':
          description: The server cannot find the requested resource.
components:
  parameters:
    actionItem:
      name: actionitemId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    retro:
      name: retroId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    team:
      name: teamId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    thought:
      name: thoughtId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    user:
      name: userId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'
  schemas:
    ActionItem:
      type: object
      required:
        - id
        - task
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/Id'
          readOnly: true
        task:
          type: string
        completed:
          type: boolean
          default: false
        assignee:
          type: string
    ActionItemUpdate:
      type: object
      properties:
        task:
          type: string
        completed:
          type: boolean
          default: false
        assignee:
          type: string
    Id:
      type: string
      format: uuid
    Retro:
      type: object
      required:
        - id
        - name
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/Id'
          readOnly: true
        name:
          type: string
        metadata:
          type: object
          additionalProperties: {}
        completed:
          type: boolean
          default: false
    RetroUpdate:
      type: object
      properties:
        name:
          type: string
        metadata:
          type: object
          additionalProperties: {}
        completed:
          type: boolean
          default: false
    Team:
      type: object
      required:
        - id
        - name
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/Id'
          readOnly: true
        name:
          type: string
    TeamUpdate:
      type: object
      properties:
        name:
          type: string
    Thought:
      type: object
      required:
        - id
        - message
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/Id'
          readOnly: true
        message:
          type: string
        votes:
          type: integer
          default: 0
        completed:
          type: boolean
          default: false
        index:
          type: integer
          default: 0
    ThoughtUpdate:
      type: object
      properties:
        message:
          type: string
        votes:
          type: integer
          default: 0
        completed:
          type: boolean
          default: false
        index:
          type: integer
          default: 0
    User:
      type: object
      required:
        - id
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/Id'
          readOnly: true
